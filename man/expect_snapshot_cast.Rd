% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/snapshot.R
\name{expect_snapshot_cast}
\alias{expect_snapshot_cast}
\title{Create and Save an SVG of Expression Output}
\usage{
expect_snapshot_cast(
  expr,
  ...,
  dir = tempdir(),
  num_colors = 256,
  window = FALSE,
  start_at = NULL,
  end_at = NULL,
  at = "end",
  cursor = FALSE,
  rows = NULL,
  cols = NULL,
  padding = NULL,
  padding_x = NULL,
  padding_y = NULL,
  omit_last_line = TRUE,
  theme = NULL,
  show = FALSE,
  name = NULL,
  cran = FALSE,
  compare = NULL,
  transform = NULL,
  variant = NULL
)
}
\arguments{
\item{expr}{An expression to evaluate and capture the output from}

\item{...}{These dots are for future extensions and must be empty.}

\item{dir}{Directory to save the SVG file (default: \code{tempdir()})}

\item{num_colors}{The number of colors to use in the terminal (default: 256)}

\item{window}{Render with window decorations.}

\item{start_at}{Lower range of timeline to render in seconds.}

\item{end_at}{Upper range of timeline to render in seconds.}

\item{at}{Timestamp of single frame to render, in seconds. Alternatively
it can be \code{"end"}, to take a snapshot at the end of the cast, after
all output is done.}

\item{cursor}{Enable cursor rendering.}

\item{rows}{Height in lines.}

\item{cols}{Width in columns.}

\item{padding}{Distance between text and image bounds.}

\item{padding_x}{Distance between text and image bounds on x axis.}

\item{padding_y}{Distance between text and image bounds on y axis.}

\item{omit_last_line}{Must be \code{TRUE} because otherwise output dimensions are incorrect.}

\item{theme}{A named list to override the default theme
(see \code{\link[=default_theme]{default_theme()}}).}

\item{show}{Whether to show the SVG file on the screen, in the viewer
pane in RStudio, or in the web browser.}

\item{name}{Snapshot name, derived from the expression by default.
Override if the same test file creates two snapshots with the same expression.}

\item{cran}{Should these expectations be verified on CRAN? By default,
they are not, because snapshot tests tend to be fragile because they
often rely on minor details of dependencies.}

\item{compare}{A function used to compare the snapshot files. It should take
two inputs, the paths to the \code{old} and \code{new} snapshot, and return either
\code{TRUE} or \code{FALSE}. This defaults to \code{compare_file_text} if \code{name} has
extension \code{.r}, \code{.R}, \code{.Rmd}, \code{.md}, or \code{.txt}, and otherwise uses
\code{compare_file_binary}.

\code{compare_file_binary()} compares byte-by-byte and
\code{compare_file_text()} compares lines-by-line, ignoring
the difference between Windows and Mac/Linux line endings.}

\item{transform}{Optionally, a function to scrub sensitive or stochastic
text from the output. Should take a character vector of lines as input
and return a modified character vector as output.}

\item{variant}{If not-\code{NULL}, results will be saved in
\verb{_snaps/{variant}/{test}/{name}.{ext}}. This allows you to create
different snapshots for different scenarios, like different operating
systems or different R versions.}
}
\value{
The value of \code{expr}, invisibly.
This function is normally called for its side effects.
}
\description{
This function wraps \code{\link[=capture_cast]{capture_cast()}}, \code{\link[=write_svg]{write_svg()}} and \code{\link[testthat:expect_snapshot_file]{testthat::expect_snapshot_file()}}
for use in snapshot tests.
It captures the output of an expression, creates a cast object,
and registers it as a snapshot in SVG format with a name derived from the expression.
}
\examples{
svg_path <- expect_snapshot_cast(print(tibble::tibble(a = 1:3)))
}
